package flower

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetFlowersNameHandlerFunc turns a function with the right signature into a get flowers name handler
type GetFlowersNameHandlerFunc func(GetFlowersNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFlowersNameHandlerFunc) Handle(params GetFlowersNameParams) middleware.Responder {
	return fn(params)
}

// GetFlowersNameHandler interface for that can handle valid get flowers name params
type GetFlowersNameHandler interface {
	Handle(GetFlowersNameParams) middleware.Responder
}

// NewGetFlowersName creates a new http.Handler for the get flowers name operation
func NewGetFlowersName(ctx *middleware.Context, handler GetFlowersNameHandler) *GetFlowersName {
	return &GetFlowersName{Context: ctx, Handler: handler}
}

/*GetFlowersName swagger:route GET /flowers/{name} Flower getFlowersName

指定された名前の花びら定義を取得

名前を指定して花びら定義を取得する


*/
type GetFlowersName struct {
	Context *middleware.Context
	Handler GetFlowersNameHandler
}

func (o *GetFlowersName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetFlowersNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

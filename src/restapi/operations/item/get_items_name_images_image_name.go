package item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetItemsNameImagesImageNameHandlerFunc turns a function with the right signature into a get items name images image name handler
type GetItemsNameImagesImageNameHandlerFunc func(GetItemsNameImagesImageNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetItemsNameImagesImageNameHandlerFunc) Handle(params GetItemsNameImagesImageNameParams) middleware.Responder {
	return fn(params)
}

// GetItemsNameImagesImageNameHandler interface for that can handle valid get items name images image name params
type GetItemsNameImagesImageNameHandler interface {
	Handle(GetItemsNameImagesImageNameParams) middleware.Responder
}

// NewGetItemsNameImagesImageName creates a new http.Handler for the get items name images image name operation
func NewGetItemsNameImagesImageName(ctx *middleware.Context, handler GetItemsNameImagesImageNameHandler) *GetItemsNameImagesImageName {
	return &GetItemsNameImagesImageName{Context: ctx, Handler: handler}
}

/*GetItemsNameImagesImageName swagger:route GET /items/{name}/images/{image_name} Item getItemsNameImagesImageName

名前を指定して染色用画像を取得

指定された名前の装備の画像セットの中から、
さらに名前を指定して画像セットを取得する


*/
type GetItemsNameImagesImageName struct {
	Context *middleware.Context
	Handler GetItemsNameImagesImageNameHandler
}

func (o *GetItemsNameImagesImageName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetItemsNameImagesImageNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

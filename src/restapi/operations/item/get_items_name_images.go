package item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetItemsNameImagesHandlerFunc turns a function with the right signature into a get items name images handler
type GetItemsNameImagesHandlerFunc func(GetItemsNameImagesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetItemsNameImagesHandlerFunc) Handle(params GetItemsNameImagesParams) middleware.Responder {
	return fn(params)
}

// GetItemsNameImagesHandler interface for that can handle valid get items name images params
type GetItemsNameImagesHandler interface {
	Handle(GetItemsNameImagesParams) middleware.Responder
}

// NewGetItemsNameImages creates a new http.Handler for the get items name images operation
func NewGetItemsNameImages(ctx *middleware.Context, handler GetItemsNameImagesHandler) *GetItemsNameImages {
	return &GetItemsNameImages{Context: ctx, Handler: handler}
}

/*GetItemsNameImages swagger:route GET /items/{name}/images Item getItemsNameImages

染色用画像を取得

装備名を指定して染色用画像を取得する


*/
type GetItemsNameImages struct {
	Context *middleware.Context
	Handler GetItemsNameImagesHandler
}

func (o *GetItemsNameImages) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetItemsNameImagesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
